# coding: utf-8

"""
    PowerDNS Authoritative HTTP API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pdns_auth_client.models.rr_set import RRSet
from typing import Optional, Set
from typing_extensions import Self

class Zone(BaseModel):
    """
    This represents an authoritative DNS Zone.
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="MAY be set. Its value is defined by local policy")
    api_rectify: Optional[StrictBool] = Field(default=None, description="Whether or not the zone will be rectified on data changes via the API")
    catalog: Optional[StrictStr] = Field(default=None, description="The catalog this zone is a member of")
    dnssec: Optional[StrictBool] = Field(default=None, description="Whether or not this zone is DNSSEC signed (inferred from presigned being true XOR presence of at least one cryptokey with active being true)")
    edited_serial: Optional[StrictInt] = Field(default=None, description="The SOA serial as seen in query responses. Calculated using the SOA-EDIT metadata, default-soa-edit and default-soa-edit-signed settings")
    id: Optional[StrictStr] = Field(default=None, description="Opaque zone id (string), assigned by the server, should not be interpreted by the application. Guaranteed to be safe for embedding in URLs.")
    kind: Optional[StrictStr] = Field(default=None, description="Zone kind, one of “Native”, “Master”, “Slave”, “Producer”, “Consumer”")
    master_tsig_key_ids: Optional[List[StrictStr]] = Field(default=None, description="The id of the TSIG keys used for master operation in this zone")
    masters: Optional[List[StrictStr]] = Field(default=None, description=" List of IP addresses configured as a master for this zone (“Slave” type zones only)")
    name: Optional[StrictStr] = Field(default=None, description="Name of the zone (e.g. “example.com.”) MUST have a trailing dot")
    nameservers: Optional[List[StrictStr]] = Field(default=None, description="MAY be sent in client bodies during creation, and MUST NOT be sent by the server. Simple list of strings of nameserver names, including the trailing dot. Not required for slave zones.")
    notified_serial: Optional[StrictInt] = Field(default=None, description="The SOA serial notifications have been sent out for")
    nsec3narrow: Optional[StrictBool] = Field(default=None, description="Whether or not the zone uses NSEC3 narrow")
    nsec3param: Optional[StrictStr] = Field(default=None, description="The NSEC3PARAM record")
    presigned: Optional[StrictBool] = Field(default=None, description="Whether or not the zone is pre-signed")
    rrsets: Optional[List[RRSet]] = Field(default=None, description="RRSets in this zone (for zones/{zone_id} endpoint only; omitted during GET on the .../zones list endpoint)")
    serial: Optional[StrictInt] = Field(default=None, description="The SOA serial number")
    slave_tsig_key_ids: Optional[List[StrictStr]] = Field(default=None, description="The id of the TSIG keys used for slave operation in this zone")
    soa_edit: Optional[StrictStr] = Field(default=None, description="The SOA-EDIT metadata item")
    soa_edit_api: Optional[StrictStr] = Field(default=None, description="The SOA-EDIT-API metadata item")
    type: Optional[StrictStr] = Field(default=None, description="Set to “Zone”")
    url: Optional[StrictStr] = Field(default=None, description="API endpoint for this zone")
    zone: Optional[StrictStr] = Field(default=None, description="MAY contain a BIND-style zone file when creating a zone")
    __properties: ClassVar[List[str]] = ["account", "api_rectify", "catalog", "dnssec", "edited_serial", "id", "kind", "master_tsig_key_ids", "masters", "name", "nameservers", "notified_serial", "nsec3narrow", "nsec3param", "presigned", "rrsets", "serial", "slave_tsig_key_ids", "soa_edit", "soa_edit_api", "type", "url", "zone"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Native', 'Master', 'Slave', 'Producer', 'Consumer']):
            raise ValueError("must be one of enum values ('Native', 'Master', 'Slave', 'Producer', 'Consumer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Zone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rrsets (list)
        _items = []
        if self.rrsets:
            for _item_rrsets in self.rrsets:
                if _item_rrsets:
                    _items.append(_item_rrsets.to_dict())
            _dict['rrsets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Zone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "api_rectify": obj.get("api_rectify"),
            "catalog": obj.get("catalog"),
            "dnssec": obj.get("dnssec"),
            "edited_serial": obj.get("edited_serial"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "master_tsig_key_ids": obj.get("master_tsig_key_ids"),
            "masters": obj.get("masters"),
            "name": obj.get("name"),
            "nameservers": obj.get("nameservers"),
            "notified_serial": obj.get("notified_serial"),
            "nsec3narrow": obj.get("nsec3narrow"),
            "nsec3param": obj.get("nsec3param"),
            "presigned": obj.get("presigned"),
            "rrsets": [RRSet.from_dict(_item) for _item in obj["rrsets"]] if obj.get("rrsets") is not None else None,
            "serial": obj.get("serial"),
            "slave_tsig_key_ids": obj.get("slave_tsig_key_ids"),
            "soa_edit": obj.get("soa_edit"),
            "soa_edit_api": obj.get("soa_edit_api"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "zone": obj.get("zone")
        })
        return _obj


