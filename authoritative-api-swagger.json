{
  "openapi": "3.0.0",
  "info": {
    "license": {
      "name": "MIT"
    },
    "title": "PowerDNS Authoritative HTTP API",
    "version": "0.0.15"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/error": {
      "get": {
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "operationId": "error",
        "summary": "Will always generate an error"
      }
    },
    "/servers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Server"
                  },
                  "type": "array"
                }
              }
            },
            "description": "An array of servers"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "servers"
        ],
        "operationId": "listServers",
        "summary": "List all servers"
      }
    },
    "/servers/{server_id}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            },
            "description": "An server"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "servers"
        ],
        "operationId": "listServer",
        "summary": "List a server"
      }
    },
    "/servers/{server_id}/autoprimaries": {
      "parameters": [
        {
          "description": "The id of the server to manage the list of autoprimaries on",
          "in": "path",
          "name": "server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autoprimary"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "autoprimary"
        ],
        "operationId": "getAutoprimaries",
        "summary": "Get a list of autoprimaries"
      },
      "post": {
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "autoprimary"
        ],
        "description": "This methods add a new autoprimary server.",
        "operationId": "createAutoprimary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Autoprimary"
              }
            }
          },
          "description": "autoprimary entry to add",
          "required": true
        },
        "summary": "Add an autoprimary"
      }
    },
    "/servers/{server_id}/autoprimaries/{ip}/{nameserver}": {
      "parameters": [
        {
          "description": "The id of the server to delete the autoprimary from",
          "in": "path",
          "name": "server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "IP address of autoprimary",
          "in": "path",
          "name": "ip",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "DNS name of the autoprimary",
          "in": "path",
          "name": "nameserver",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "OK, key was deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "autoprimary"
        ],
        "operationId": "deleteAutoprimary",
        "summary": "Delete the autoprimary entry"
      }
    },
    "/servers/{server_id}/cache/flush": {
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The domain name to flush from the cache",
            "in": "query",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheFlushResult"
                }
              }
            },
            "description": "Flush successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "servers"
        ],
        "operationId": "cacheFlushByName",
        "summary": "Flush a cache-entry by name"
      }
    },
    "/servers/{server_id}/config": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of config values"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "config"
        ],
        "operationId": "getConfig",
        "summary": "Returns all ConfigSettings for a single server"
      }
    },
    "/servers/{server_id}/config/{config_setting_name}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the setting to retrieve",
            "in": "path",
            "name": "config_setting_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSetting"
                }
              }
            },
            "description": "List of config values"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "config"
        ],
        "description": "NOT IMPLEMENTED",
        "operationId": "getConfigSetting",
        "summary": "Returns a specific ConfigSetting for a single server"
      }
    },
    "/servers/{server_id}/search-data": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The string to search for",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of entries to return",
            "in": "query",
            "name": "max",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Type of data to search for, one of “all”, “zone”, “record”, “comment”",
            "in": "query",
            "name": "object_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResults"
                }
              }
            },
            "description": "Returns a JSON array with results"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "search"
        ],
        "description": "Search the data inside PowerDNS for search_term and return at most max_results. This includes zones, records and comments. The * character can be used in search_term as a wildcard character and the ? character can be used as a wildcard for a single character.",
        "operationId": "searchData",
        "summary": "Search the data inside PowerDNS"
      }
    },
    "/servers/{server_id}/statistics": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to the name of a specific statistic, only this value is returned.\nIf no statistic with that name exists, the response has a 422 status and an error message.\n",
            "in": "query",
            "name": "statistic",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "“true” (default) or “false”, whether to include the Ring items, which can contain thousands of log messages or queried domains. Setting this to ”false” may make the response a lot smaller.",
            "in": "query",
            "name": "includerings",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/StatisticItem"
                      },
                      {
                        "$ref": "#/components/schemas/MapStatisticItem"
                      },
                      {
                        "$ref": "#/components/schemas/RingStatisticItem"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of Statistic Items"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "description": "Returned when a non-existing statistic name has been requested. Contains an error message"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "stats"
        ],
        "description": "Query PowerDNS internal statistics.",
        "operationId": "getStats",
        "summary": "Query statistics."
      }
    },
    "/servers/{server_id}/tsigkeys": {
      "parameters": [
        {
          "description": "The id of the server",
          "in": "path",
          "name": "server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TSIGKey"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of TSIGKey objects"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "tsigkey"
        ],
        "operationId": "listTSIGKeys",
        "summary": "Get all TSIGKeys on the server, except the actual key"
      },
      "post": {
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TSIGKey"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An item with this name already exists"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "tsigkey"
        ],
        "description": "This methods add a new TSIGKey. The actual key can be generated by the server or be provided by the client",
        "operationId": "createTSIGKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TSIGKey"
              }
            }
          },
          "description": "The TSIGKey to add",
          "required": true
        },
        "summary": "Add a TSIG key"
      }
    },
    "/servers/{server_id}/tsigkeys/{tsigkey_id}": {
      "parameters": [
        {
          "description": "The id of the server to retrieve the key from",
          "in": "path",
          "name": "server_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The id of the TSIGkey. Should match the \"id\" field in the TSIGKey object",
          "in": "path",
          "name": "tsigkey_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "OK, key was deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "tsigkey"
        ],
        "operationId": "deleteTSIGKey",
        "summary": "Delete the TSIGKey with tsigkey_id"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TSIGKey"
                }
              }
            },
            "description": "OK."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "tsigkey"
        ],
        "operationId": "getTSIGKey",
        "summary": "Get a specific TSIGKeys on the server, including the actual key"
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TSIGKey"
                }
              }
            },
            "description": "OK. TSIGKey is changed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An item with this name already exists"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "tsigkey"
        ],
        "description": "The TSIGKey at tsigkey_id can be changed in multiple ways:\n * Changing the Name, this will remove the key with tsigkey_id after adding.\n * Changing the Algorithm\n * Changing the Key\n\nOnly the relevant fields have to be provided in the request body.\n",
        "operationId": "putTSIGKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TSIGKey"
              }
            }
          },
          "description": "A (possibly stripped down) TSIGKey object with the new values",
          "required": true
        }
      }
    },
    "/servers/{server_id}/zones": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "When set to the name of a zone, only this zone is returned.\nIf no zone with that name exists, the response is an empty array.\nThis can e.g. be used to check if a zone exists in the database without having to guess/encode the zone's id or to check if a zone exists.\n",
            "in": "query",
            "name": "zone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "“true” (default) or “false”, whether to include the “dnssec” and ”edited_serial” fields in the Zone objects. Setting this to ”false” will make the query a lot faster.",
            "in": "query",
            "name": "dnssec",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Zone"
                  },
                  "type": "array"
                }
              }
            },
            "description": "An array of Zones"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "listZones",
        "summary": "List all Zones in a server"
      },
      "post": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "“true” (default) or “false”, whether to include the “rrsets” in the response Zone object.",
            "in": "query",
            "name": "rrsets",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                }
              }
            },
            "description": "A zone"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "createZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Zone"
              }
            }
          },
          "description": "The zone struct to patch with",
          "required": true
        },
        "summary": "Creates a new domain, returns the Zone on creation."
      }
    },
    "/servers/{server_id}/zones/{zone_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns 204 No Content on success."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "deleteZone",
        "summary": "Deletes this zone, all attached metadata and rrsets."
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "“true” (default) or “false”, whether to include the “rrsets” in the response Zone object.",
            "in": "query",
            "name": "rrsets",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Limit output to RRsets for this name.",
            "in": "query",
            "name": "rrset_name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit output to the RRset of this type. Can only be used together with rrset_name.",
            "in": "query",
            "name": "rrset_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zone"
                }
              }
            },
            "description": "A Zone"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "listZone",
        "summary": "zone managed by a server"
      },
      "patch": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns 204 No Content on success."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "patchZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Zone"
              }
            }
          },
          "description": "The zone struct to patch with",
          "required": true
        },
        "summary": "Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success."
      },
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns 204 No Content on success."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "description": "The only fields in the zone structure which can be modified are: kind, masters, catalog, account, soa_edit, soa_edit_api, api_rectify, dnssec, and nsec3param. All other fields are ignored.",
        "operationId": "putZone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Zone"
              }
            }
          },
          "description": "The zone struct to patch with",
          "required": true
        },
        "summary": "Modifies basic zone data."
      }
    },
    "/servers/{server_id}/zones/{zone_id}/axfr-retrieve": {
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "description": "Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.",
        "operationId": "axfrRetrieveZone",
        "summary": "Retrieve slave zone from its master."
      }
    },
    "/servers/{server_id}/zones/{zone_id}/cryptokeys": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Cryptokey"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of Cryptokey objects"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonecryptokey"
        ],
        "operationId": "listCryptokeys",
        "summary": "Get all CryptoKeys for a zone, except the privatekey"
      },
      "post": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptokey"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonecryptokey"
        ],
        "description": "This method adds a new key to a zone. The key can either be generated or imported by supplying the content parameter. if content, bits and algo are null, a key will be generated based on the default-ksk-algorithm and default-ksk-size settings for a KSK and the default-zsk-algorithm and default-zsk-size options for a ZSK.",
        "operationId": "createCryptokey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cryptokey"
              }
            }
          },
          "description": "Add a Cryptokey",
          "required": true
        },
        "summary": "Creates a Cryptokey"
      }
    },
    "/servers/{server_id}/zones/{zone_id}/cryptokeys/{cryptokey_id}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id value of the Cryptokey",
            "in": "path",
            "name": "cryptokey_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonecryptokey"
        ],
        "operationId": "deleteCryptokey",
        "summary": "This method deletes a key specified by cryptokey_id."
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id value of the CryptoKey",
            "in": "path",
            "name": "cryptokey_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptokey"
                }
              }
            },
            "description": "Cryptokey"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonecryptokey"
        ],
        "operationId": "getCryptokey",
        "summary": "Returns all data about the CryptoKey, including the privatekey."
      },
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Cryptokey to manipulate",
            "in": "path",
            "name": "cryptokey_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonecryptokey"
        ],
        "operationId": "modifyCryptokey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cryptokey"
              }
            }
          },
          "description": "the Cryptokey",
          "required": true
        },
        "summary": "This method (de)activates a key from zone_name specified by cryptokey_id"
      }
    },
    "/servers/{server_id}/zones/{zone_id}/export": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "operationId": "axfrExportZone",
        "summary": "Returns the zone in AXFR format."
      }
    },
    "/servers/{server_id}/zones/{zone_id}/metadata": {
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of Metadata objects"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonemetadata"
        ],
        "operationId": "listMetadata",
        "summary": "Get all the Metadata associated with the zone."
      },
      "post": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonemetadata"
        ],
        "description": "Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.",
        "operationId": "createMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "description": "Metadata object with list of values to create",
          "required": true
        },
        "summary": "Creates a set of metadata entries"
      }
    },
    "/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The kind of metadata",
            "in": "path",
            "name": "metadata_kind",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonemetadata"
        ],
        "operationId": "deleteMetadata",
        "summary": "Delete all items of a single kind of domain metadata."
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The kind of metadata",
            "in": "path",
            "name": "metadata_kind",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            },
            "description": "Metadata object with list of values"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonemetadata"
        ],
        "operationId": "getMetadata",
        "summary": "Get the content of a single kind of domain metadata as a Metadata object."
      },
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The kind of metadata",
            "in": "path",
            "name": "metadata_kind",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            },
            "description": "Metadata object with list of values"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zonemetadata"
        ],
        "description": "Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are removed.",
        "operationId": "modifyMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          },
          "description": "metadata to add/create",
          "required": true
        },
        "summary": "Replace the content of a single kind of domain metadata."
      }
    },
    "/servers/{server_id}/zones/{zone_id}/notify": {
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "description": "Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.",
        "operationId": "notifyZone",
        "summary": "Send a DNS NOTIFY to all slaves."
      }
    },
    "/servers/{server_id}/zones/{zone_id}/rectify": {
      "put": {
        "parameters": [
          {
            "description": "The id of the server to retrieve",
            "in": "path",
            "name": "server_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the zone to retrieve",
            "in": "path",
            "name": "zone_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The supplied request was not valid"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Requested item was not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "The input to the operation was not valid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "tags": [
          "zones"
        ],
        "description": "This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.",
        "operationId": "rectifyZone",
        "summary": "Rectify the zone data."
      }
    }
  },
  "components": {
    "requestBodies": {
      "Zone": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Zone"
            }
          }
        },
        "description": "The zone struct to patch with",
        "required": true
      }
    },
    "schemas": {
      "Autoprimary": {
        "description": "An autoprimary server that can provision new domains.",
        "properties": {
          "account": {
            "description": "Account name for the autoprimary server",
            "type": "string"
          },
          "ip": {
            "description": "IP address of the autoprimary server",
            "type": "string"
          },
          "nameserver": {
            "description": "DNS name of the autoprimary server",
            "type": "string"
          }
        },
        "title": "Autoprimary server",
        "type": "object"
      },
      "CacheFlushResult": {
        "description": "The result of a cache-flush",
        "properties": {
          "count": {
            "description": "Amount of entries flushed",
            "type": "number"
          },
          "result": {
            "description": "A message about the result like \"Flushed cache\"",
            "type": "string"
          }
        },
        "title": "CacheFlushResult",
        "type": "object"
      },
      "Comment": {
        "description": "A comment about an RRSet.",
        "properties": {
          "account": {
            "description": "Name of an account that added the comment",
            "type": "string"
          },
          "content": {
            "description": "The actual comment",
            "type": "string"
          },
          "modified_at": {
            "description": "Timestamp of the last change to the comment",
            "type": "integer"
          }
        },
        "title": "Comment",
        "type": "object"
      },
      "ConfigSetting": {
        "properties": {
          "name": {
            "description": "set to \"ConfigSetting\"",
            "type": "string"
          },
          "type": {
            "description": "The name of this setting (e.g. ‘webserver-port’)",
            "type": "string"
          },
          "value": {
            "description": "The value of setting name",
            "type": "string"
          }
        },
        "title": "ConfigSetting",
        "type": "object"
      },
      "Cryptokey": {
        "description": "Describes a DNSSEC cryptographic key",
        "properties": {
          "active": {
            "description": "Whether or not the key is in active use",
            "type": "boolean"
          },
          "algorithm": {
            "description": "The name of the algorithm of the key, should be a mnemonic",
            "type": "string"
          },
          "bits": {
            "description": "The size of the key",
            "type": "integer"
          },
          "cds": {
            "description": "An array of DS records for this key, filtered by CDS publication settings",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dnskey": {
            "description": "The DNSKEY record for this key",
            "type": "string"
          },
          "ds": {
            "description": "An array of DS records for this key",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "The internal identifier, read only",
            "type": "integer"
          },
          "keytype": {
            "enum": [
              "ksk",
              "zsk",
              "csk"
            ],
            "type": "string"
          },
          "privatekey": {
            "description": "The private key in ISC format",
            "type": "string"
          },
          "published": {
            "description": "Whether or not the DNSKEY record is published in the zone",
            "type": "boolean"
          },
          "type": {
            "description": "set to \"Cryptokey\"",
            "type": "string"
          }
        },
        "title": "Cryptokey",
        "type": "object"
      },
      "Error": {
        "description": "Returned when the server encounters an error, either in client input or internally",
        "properties": {
          "error": {
            "description": "A human readable error message",
            "type": "string"
          },
          "errors": {
            "description": "Optional array of multiple errors encountered during processing",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "error"
        ],
        "title": "Error",
        "type": "object"
      },
      "MapStatisticItem": {
        "properties": {
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "type": {
            "description": "Set to \"MapStatisticItem\"",
            "type": "string"
          },
          "value": {
            "description": "Named values",
            "items": {
              "$ref": "#/components/schemas/SimpleStatisticItem"
            },
            "type": "array"
          }
        },
        "title": "MapStatisticItem",
        "type": "object"
      },
      "Metadata": {
        "description": "Represents zone metadata",
        "properties": {
          "kind": {
            "description": "Name of the metadata",
            "type": "string"
          },
          "metadata": {
            "description": "Array with all values for this metadata kind.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "RRSet": {
        "description": "This represents a Resource Record Set (all records with the same name and type).",
        "properties": {
          "changetype": {
            "description": "MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.",
            "type": "string"
          },
          "comments": {
            "description": "List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array"
          },
          "name": {
            "description": "Name for record set (e.g. “www.powerdns.com.”)",
            "type": "string"
          },
          "records": {
            "description": "All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).",
            "items": {
              "$ref": "#/components/schemas/Record"
            },
            "type": "array"
          },
          "ttl": {
            "description": "DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.",
            "type": "integer"
          },
          "type": {
            "description": "Type of this record (e.g. “A”, “PTR”, “MX”)",
            "type": "string"
          }
        },
        "required": [
          "name",
          "type",
          "records"
        ],
        "title": "RRSet",
        "type": "object"
      },
      "Record": {
        "description": "The RREntry object represents a single record.",
        "properties": {
          "content": {
            "description": "The content of this record",
            "type": "string"
          },
          "disabled": {
            "description": "Whether or not this record is disabled. When unset, the record is not disabled",
            "type": "boolean"
          }
        },
        "required": [
          "content"
        ],
        "title": "Record",
        "type": "object"
      },
      "RingStatisticItem": {
        "properties": {
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "size": {
            "description": "Ring size",
            "type": "integer"
          },
          "type": {
            "description": "Set to \"RingStatisticItem\"",
            "type": "string"
          },
          "value": {
            "description": "Named values",
            "items": {
              "$ref": "#/components/schemas/SimpleStatisticItem"
            },
            "type": "array"
          }
        },
        "title": "RingStatisticItem",
        "type": "object"
      },
      "SearchResult": {
        "properties": {
          "content": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "object_type": {
            "description": "set to one of \"record, zone, comment\"",
            "type": "string"
          },
          "ttl": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "zone_id": {
            "type": "string"
          }
        },
        "title": "SearchResult",
        "type": "object"
      },
      "SearchResultComment": {
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object_type": {
            "description": "set to \"comment\"",
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "zone_id": {
            "type": "string"
          }
        },
        "title": "SearchResultComment",
        "type": "object"
      },
      "SearchResultRecord": {
        "properties": {
          "content": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "object_type": {
            "description": "set to \"record\"",
            "type": "string"
          },
          "ttl": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "zone_id": {
            "type": "string"
          }
        },
        "title": "SearchResultRecord",
        "type": "object"
      },
      "SearchResultZone": {
        "properties": {
          "name": {
            "type": "string"
          },
          "object_type": {
            "description": "set to \"zone\"",
            "type": "string"
          },
          "zone_id": {
            "type": "string"
          }
        },
        "title": "SearchResultZone",
        "type": "object"
      },
      "SearchResults": {
        "items": {
          "$ref": "#/components/schemas/SearchResult"
        },
        "type": "array"
      },
      "Server": {
        "properties": {
          "config_url": {
            "description": "The API endpoint for this server’s configuration",
            "type": "string"
          },
          "daemon_type": {
            "description": "“recursor” for the PowerDNS Recursor and “authoritative” for the Authoritative Server",
            "type": "string"
          },
          "id": {
            "description": "The id of the server, “localhost”",
            "type": "string"
          },
          "type": {
            "description": "Set to “Server”",
            "type": "string"
          },
          "url": {
            "description": "The API endpoint for this server",
            "type": "string"
          },
          "version": {
            "description": "The version of the server software",
            "type": "string"
          },
          "zones_url": {
            "description": "The API endpoint for this server’s zones",
            "type": "string"
          }
        },
        "title": "Server",
        "type": "object"
      },
      "Servers": {
        "items": {
          "$ref": "#/components/schemas/Server"
        },
        "type": "array"
      },
      "SimpleStatisticItem": {
        "properties": {
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "value": {
            "description": "Item value",
            "type": "string"
          }
        },
        "title": "SimpleStatisticItem",
        "type": "object"
      },
      "StatisticItem": {
        "properties": {
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "type": {
            "description": "set to \"StatisticItem\"",
            "type": "string"
          },
          "value": {
            "description": "Item value",
            "type": "string"
          }
        },
        "title": "StatisticItem",
        "type": "object"
      },
      "TSIGKey": {
        "description": "A TSIG key that can be used to authenticate NOTIFY, AXFR, and DNSUPDATE queries.",
        "properties": {
          "algorithm": {
            "description": "The algorithm of the TSIG key",
            "type": "string"
          },
          "id": {
            "description": "The ID for this key, used in the TSIGkey URL endpoint.",
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "description": "The Base64 encoded secret key, empty when listing keys. MAY be empty when POSTing to have the server generate the key material",
            "type": "string"
          },
          "name": {
            "description": "The name of the key",
            "type": "string"
          },
          "type": {
            "description": "Set to \"TSIGKey\"",
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "TSIGKey",
        "type": "object"
      },
      "Zone": {
        "description": "This represents an authoritative DNS Zone.",
        "properties": {
          "account": {
            "description": "MAY be set. Its value is defined by local policy",
            "type": "string"
          },
          "api_rectify": {
            "description": "Whether or not the zone will be rectified on data changes via the API",
            "type": "boolean"
          },
          "catalog": {
            "description": "The catalog this zone is a member of",
            "type": "string"
          },
          "dnssec": {
            "description": "Whether or not this zone is DNSSEC signed (inferred from presigned being true XOR presence of at least one cryptokey with active being true)",
            "type": "boolean"
          },
          "edited_serial": {
            "description": "The SOA serial as seen in query responses. Calculated using the SOA-EDIT metadata, default-soa-edit and default-soa-edit-signed settings",
            "type": "integer"
          },
          "id": {
            "description": "Opaque zone id (string), assigned by the server, should not be interpreted by the application. Guaranteed to be safe for embedding in URLs.",
            "type": "string"
          },
          "kind": {
            "description": "Zone kind, one of “Native”, “Master”, “Slave”, “Producer”, “Consumer”",
            "enum": [
              "Native",
              "Master",
              "Slave",
              "Producer",
              "Consumer"
            ],
            "type": "string"
          },
          "master_tsig_key_ids": {
            "externalDocs": {
              "url": "https://doc.powerdns.com/authoritative/tsig.html#provisioning-outbound-axfr-access"
            },
            "description": "The id of the TSIG keys used for master operation in this zone",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "masters": {
            "description": " List of IP addresses configured as a master for this zone (“Slave” type zones only)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the zone (e.g. “example.com.”) MUST have a trailing dot",
            "type": "string"
          },
          "nameservers": {
            "description": "MAY be sent in client bodies during creation, and MUST NOT be sent by the server. Simple list of strings of nameserver names, including the trailing dot. Not required for slave zones.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "notified_serial": {
            "description": "The SOA serial notifications have been sent out for",
            "type": "integer"
          },
          "nsec3narrow": {
            "description": "Whether or not the zone uses NSEC3 narrow",
            "type": "boolean"
          },
          "nsec3param": {
            "description": "The NSEC3PARAM record",
            "type": "string"
          },
          "presigned": {
            "description": "Whether or not the zone is pre-signed",
            "type": "boolean"
          },
          "rrsets": {
            "description": "RRSets in this zone (for zones/{zone_id} endpoint only; omitted during GET on the .../zones list endpoint)",
            "items": {
              "$ref": "#/components/schemas/RRSet"
            },
            "type": "array"
          },
          "serial": {
            "description": "The SOA serial number",
            "type": "integer"
          },
          "slave_tsig_key_ids": {
            "externalDocs": {
              "url": "https://doc.powerdns.com/authoritative/tsig.html#provisioning-signed-notification-and-axfr-requests"
            },
            "description": "The id of the TSIG keys used for slave operation in this zone",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "soa_edit": {
            "description": "The SOA-EDIT metadata item",
            "type": "string"
          },
          "soa_edit_api": {
            "description": "The SOA-EDIT-API metadata item",
            "type": "string"
          },
          "type": {
            "description": "Set to “Zone”",
            "type": "string"
          },
          "url": {
            "description": "API endpoint for this zone",
            "type": "string"
          },
          "zone": {
            "description": "MAY contain a BIND-style zone file when creating a zone",
            "type": "string"
          }
        },
        "title": "Zone",
        "type": "object"
      },
      "Zones": {
        "items": {
          "$ref": "#/components/schemas/Zone"
        },
        "type": "array"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      }
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    }
  ]
}
